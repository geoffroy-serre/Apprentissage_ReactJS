{"version":3,"sources":["components/search-box/search-box.jsx","components/card/card.jsx","components/card-list/card-list.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","CardList","map","user","App","e","setState","searchField","target","value","state","fetch","then","r","json","users","catch","console","log","this","filterMonsters","filter","monsta","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBACQC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCLbI,G,YAAO,SAACC,GAAD,OACZ,sBAAKJ,UAAU,iBAAf,UACE,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAKJ,EAAMG,QAAQE,YCFhBC,EAAW,SAACN,GACvB,OACQ,qBAAKJ,UAAU,YAAf,SACGI,EAAMG,QAAQI,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,CAAoBL,QAASK,GAAlBA,EAAKJ,UCsCrBK,E,kDAxCb,aAAe,IAAD,8BACZ,gBAgBFd,aAAe,SAACe,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXZ,QAAS,GACTS,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACGC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAACR,QAASiB,OACxCC,OAAM,SAACX,GAAD,OAAOY,QAAQC,IAAI,4B,oBASpC,WACE,MAA+BC,KAAKT,MAA7BZ,EAAP,EAAOA,QAASS,EAAhB,EAAgBA,YACVa,EAAiBtB,EAAQuB,QAAO,SAACC,GAAD,OAAYA,EAAOtB,KAAKuB,cAAcC,SAASjB,EAAYgB,kBACjG,OACQ,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CAAWF,YAAY,iBAMZC,aAAc6B,KAAK7B,eAC9B,cAAC,EAAD,CAAUQ,QAASsB,W,GAnCfK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.56b1a7da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n        <input\r\n                className=\"search\"\r\n                type=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={handleChange}\r\n        />\r\n);\r\n\r\n","import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n        <div className=\"card-container\">\r\n          <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`}/>\r\n          <h2>{props.monster.name}</h2>\r\n        </div>\r\n);\r\n","import './card-list.style.css';\nimport {Card} from '../card/card';\nimport React from 'react';\n\nexport const CardList = (props) => {\n  return (\n          <div className=\"card-list\">\n            {props.monster.map((user) => (\n                    <Card key={user.id} monster={user}/>\n            ))}\n          </div>\n  );\n};\n","import React, {Component} from 'react';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box';\nimport {CardList} from './components/card-list/card-list';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then((r) => r.json())\n            .then((users) => this.setState({monster: users}))\n            .catch((e) => console.log('Error getting users'));\n  }\n\n  // Utiliser une fonction fléchée permet de me bind automatiquement this a App. Sans cela il faut bind this dans le\n  // constructeur. Ou utiliser une fonction fléchée a son appel.\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  };\n\n  render() {\n    const {monster, searchField} = this.state;\n    const filterMonsters = monster.filter((monsta) => monsta.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n            <div className=\"App\">\n              <h1 className=\"title\">Monsters Rolodex</h1>\n              <SearchBox placeholder=\"Search monster\"\n                      // si handle change n'était pas une fonction fléchée et non bind dans le constructeur ,\n                      // l'appel devrais être : handleChange = {(e) => {this.handleChange(e)}\n                      // ATTENTION: appeller this.handleChange() avec les () appellera la fonction des le render,\n                      // changement ou non. Sur un bouton ce type de code fera comme si on avais cliqué sur le\n                      // bouton et cliquer sur le bouton ne produirais rien.\n                         handleChange={this.handleChange}/>\n              <CardList monster={filterMonsters}/>\n            </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}